Description: Fix Python 3.8 file operations
 Under Python 3.8 we can not wrap a File in a Sock.

 Note this currently requires Python >= 3.5
Author: Brian May <brian@linuxpenguins.xyz>
Origin: upstream, https://github.com/sshuttle/sshuttle/commit/9c873579348e3308123d1bf2a917b0c2f82b9dae
Bug: https://github.com/sshuttle/sshuttle/issues/381
Bug-Debian: https://bugs.debian.org/953621
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1873368
Index: sshuttle-0.78.5/sshuttle/client.py
===================================================================
--- sshuttle-0.78.5.orig/sshuttle/client.py
+++ sshuttle-0.78.5/sshuttle/client.py
@@ -460,7 +460,7 @@ def _main(tcp_listener, udp_listener, fw
             raise Fatal("failed to establish ssh session (1)")
         else:
             raise
-    mux = Mux(serversock, serversock)
+    mux = Mux(serversock.makefile("rb"), serversock.makefile("wb"))
     handlers.append(mux)
 
     expected = b'SSHUTTLE0001'
Index: sshuttle-0.78.5/sshuttle/server.py
===================================================================
--- sshuttle-0.78.5.orig/sshuttle/server.py
+++ sshuttle-0.78.5/sshuttle/server.py
@@ -295,10 +295,7 @@ def main(latency_control, auto_hosts, to
     sys.stdout.flush()
 
     handlers = []
-    mux = Mux(socket.fromfd(sys.stdin.fileno(),
-                            socket.AF_INET, socket.SOCK_STREAM),
-              socket.fromfd(sys.stdout.fileno(),
-                            socket.AF_INET, socket.SOCK_STREAM))
+    mux = Mux(sys.stdin, sys.stdout)
     handlers.append(mux)
 
     debug1('auto-nets:' + str(auto_nets) + '\n')
Index: sshuttle-0.78.5/sshuttle/ssnet.py
===================================================================
--- sshuttle-0.78.5.orig/sshuttle/ssnet.py
+++ sshuttle-0.78.5/sshuttle/ssnet.py
@@ -334,10 +334,10 @@ class Proxy(Handler):
 
 class Mux(Handler):
 
-    def __init__(self, rsock, wsock):
-        Handler.__init__(self, [rsock, wsock])
-        self.rsock = rsock
-        self.wsock = wsock
+    def __init__(self, rfile, wfile):
+        Handler.__init__(self, [rfile, wfile])
+        self.rfile = rfile
+        self.wfile = wfile
         self.new_channel = self.got_dns_req = self.got_routes = None
         self.got_udp_open = self.got_udp_data = self.got_udp_close = None
         self.got_host_req = self.got_host_list = None
@@ -434,9 +434,9 @@ class Mux(Handler):
                 callback(cmd, data)
 
     def flush(self):
-        self.wsock.setblocking(False)
+        os.set_blocking(self.wfile.fileno(), False)
         if self.outbuf and self.outbuf[0]:
-            wrote = _nb_clean(os.write, self.wsock.fileno(), self.outbuf[0])
+            wrote = _nb_clean(os.write, self.wfile.fileno(), self.outbuf[0])
             debug2('mux wrote: %r/%d\n' % (wrote, len(self.outbuf[0])))
             if wrote:
                 self.outbuf[0] = self.outbuf[0][wrote:]
@@ -444,9 +444,9 @@ class Mux(Handler):
             self.outbuf[0:1] = []
 
     def fill(self):
-        self.rsock.setblocking(False)
+        os.set_blocking(self.rfile.fileno(), False)
         try:
-            read = _nb_clean(os.read, self.rsock.fileno(), 32768)
+            read = _nb_clean(os.read, self.rfile.fileno(), 32768)
         except OSError:
             _, e = sys.exc_info()[:2]
             raise Fatal('other end: %r' % e)
@@ -476,22 +476,22 @@ class Mux(Handler):
                 break
 
     def pre_select(self, r, w, x):
-        _add(r, self.rsock)
+        _add(r, self.rfile)
         if self.outbuf:
-            _add(w, self.wsock)
+            _add(w, self.wfile)
 
     def callback(self, sock):
-        (r, w, _) = select.select([self.rsock], [self.wsock], [], 0)
-        if self.rsock in r:
+        (r, w, _) = select.select([self.rfile], [self.wfile], [], 0)
+        if self.rfile in r:
             self.handle()
-        if self.outbuf and self.wsock in w:
+        if self.outbuf and self.wfile in w:
             self.flush()
 
 
 class MuxWrapper(SockWrapper):
 
     def __init__(self, mux, channel):
-        SockWrapper.__init__(self, mux.rsock, mux.wsock)
+        SockWrapper.__init__(self, mux.rfile, mux.wfile)
         self.mux = mux
         self.channel = channel
         self.mux.channels[channel] = self.got_packet
